{"version":3,"file":"static/js/672.bf0b90b3.chunk.js","mappings":"iOAKaA,EAAmB,SAACC,GAAe,IAEtCC,EAFqC,0IAGvC,WACI,OAAKC,KAAKC,MAAMC,QACT,SAACJ,GAAD,UAAeE,KAAKC,SADI,SAAC,KAAD,CAAUE,GAAI,eAJV,GAEPC,EAAAA,WAmBpC,OAFmCC,EAAAA,EAAAA,KAJJ,SAACC,GAAD,MAAY,CAC3CJ,OAASI,EAAMC,KAAKL,UAGeG,CAAoCN,K,iICvB3E,GAAgB,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,YAAc,6BAA6B,SAAW,0BAA0B,MAAQ,uBAAuB,aAAe,8BAA8B,eAAiB,gCAAgC,OAAS,wBAAwB,IAAM,qBAAqB,KAAO,uB,SCajZ,EAXgB,SAAC,GAAiB,IAAhBS,EAAe,EAAfA,IAAKC,EAAU,EAAVA,KACZC,EAAqBF,EAArBE,KAAMC,EAAeH,EAAfG,IAAKC,EAAUJ,EAAVI,OAClB,OACI,iBAAKC,UAAWJ,IAASG,EAASE,EAAAA,eAAyBA,EAAAA,aAA3D,WACI,gBAAKD,UAAWC,EAAAA,IAAaC,IAAKJ,EAAKK,IAAI,SAC3C,gBAAKH,UAAWC,EAAAA,QAAhB,SAAkCJ,Q,UCS9C,EAdmB,SAACT,GAChB,OACI,gBAAKY,UAAS,UAAKC,EAAAA,OAAL,YAAuBA,EAAAA,QAArC,UACI,UAAC,KAAD,CACIX,GAAE,mBAAcF,EAAMgB,IACtBJ,UAAW,qBAAGK,SACHJ,EAAAA,YAAgBK,GAH/B,WAIQ,gBAAKN,UAAWC,EAAAA,IAAaC,IAAKd,EAAMU,IAAKK,IAAI,QAChDf,EAAMmB,W,mBCFrBC,EAAsB,SAACpB,GAEzB,OACI,SAAC,KAAD,CACIqB,cAAe,GAGfC,SAAU,SAAAC,GACN,IAAMd,EAAOc,EAAOC,eACpBxB,EAAMyB,YAAYhB,IAItBiB,SAAU,SAAAH,KAVd,SAgBI,gBAAGI,EAAH,EAAGA,aAAwBC,GAA3B,EAAiBC,SAAjB,EAA2BD,MAAME,EAAjC,EAAiCA,WAAjC,OACI,kBAAMR,SAAUK,EAAgBf,UAAWC,EAAAA,KAA3C,WACI,0BACI,SAAC,KAAD,CACIM,KAAK,iBACLY,UAAWC,EAAAA,GACXC,KAAK,OACLC,YAAY,0BACZC,YAAaP,EAAKQ,MAClBV,UAAUW,EAAAA,EAAAA,IAAkBC,EAAAA,IAAeC,EAAAA,EAAAA,IAAU,UAU7D,0BACI,mBAAQN,KAAK,SAASO,SAAUV,EAAhC,mCA6CxB,EApCgB,SAAC9B,GAEb,IAEA,EAA4BA,EAAMyC,YAA3BC,EAAP,EAAOA,SAAUC,EAAjB,EAAiBA,QAEXC,EAAmBF,EAASG,KAAI,SAAAtC,GAAG,OAAI,SAAC,EAAD,CAASC,KAJzC,QAIkED,KAAG,kBAAMA,GAAN,IAAWG,IAAKiC,EAAQ,GAAGjC,OAAtCH,EAAIS,OACrE8B,EAAkBH,EAAQE,KAAI,SAAAE,GAAM,OAAI,SAAC,EAAD,CAAY5B,KAAM4B,EAAO5B,KAAsBH,GAAI+B,EAAO/B,GAAIN,IAAKqC,EAAOrC,KAAtCqC,EAAO/B,OAIzF,OACI,iBAAKJ,UAAWC,EAAAA,QAAhB,WAEI,gBAAKD,UAAWC,EAAAA,aAAhB,SAEMiC,KAIN,iBAAKlC,UAAWC,EAAAA,YAAhB,WACG,gBAAKD,UAAWC,EAAAA,SAAhB,SACG+B,KAIF,SAACxB,EAAD,CAAqBK,YAAazB,EAAMyB,qBCdxD,GAAeuB,EAAAA,EAAAA,KACX5C,EAAAA,EAAAA,KAnBoB,SAACC,GAAD,MAAY,CAChCoC,YAAcpC,EAAMoC,eAkBK,CAAChB,YAAAA,EAAAA,IAC1B7B,EAAAA,EAFJ,CAGEqD","sources":["HOC/WithAuthRedirect.js","webpack://my-app/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/Message/Message.jsx","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"sourcesContent":["import React from \"react\"\r\nimport {connect} from \"react-redux\";\r\nimport {Navigate} from \"react-router-dom\"\r\n\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n\r\n    class AuthRedirectComponent extends React.Component {\r\n        render() {\r\n            if (!this.props.isAuth) return <Navigate to={\"/login\"}/>\r\n            return <Component {...this.props} />\r\n        }\r\n    }\r\n\r\n    \r\n//     const AuthRedirectComponent = (props) => {\r\n//     if (!props.isAuth) return <Navigate to={\"/login\"}/>\r\n//     return <Component {...props} />\r\n// }\r\n\r\nconst mapStateToPropsForRedirect = (state) => ({ \r\n    isAuth : state.auth.isAuth\r\n})\r\n\r\nconst ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(AuthRedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent\r\n}\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__yEq7v\",\"dialogsItems\":\"Dialogs_dialogsItems__UFMPT\",\"active\":\"Dialogs_active__iLFvx\",\"messagesBox\":\"Dialogs_messagesBox__Cugyz\",\"messages\":\"Dialogs_messages__EI5SD\",\"myMsg\":\"Dialogs_myMsg__M+Qa-\",\"messageBlock\":\"Dialogs_messageBlock__NKNL9\",\"myMessageBlock\":\"Dialogs_myMessageBlock__AxfYZ\",\"dialog\":\"Dialogs_dialog__1u9zw\",\"ava\":\"Dialogs_ava__2a8Yj\",\"form\":\"Dialogs_form__Zdkn2\"};","import classes from \"./../Dialogs.module.css\";\r\n\r\n\r\nconst Message = ({msg, user}) => {\r\n    const {text, ava, author} = msg;\r\n    return (\r\n        <div className={user === author ? classes.myMessageBlock : classes.messageBlock}>\r\n            <img className={classes.ava} src={ava} alt='ava'/>\r\n            <div className={classes.message}>{text}</div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Message;\r\n\r\n\r\n","import classes from \"./../Dialogs.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst DialogItem = (props) => {\r\n    return(\r\n        <div className={`${classes.dialog} ${classes.active}`}>\r\n            <NavLink\r\n                to={`/dialogs/${props.id}`}\r\n                className={({ isActive }) =>\r\n                isActive ? classes.active: undefined}>\r\n                    <img className={classes.ava} src={props.ava} alt='ava'/>\r\n                    {props.name}\r\n            </NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem;","import { Form, Field } from 'react-final-form'\r\n\r\nimport classes from \"./Dialogs.module.css\";\r\nimport Message from \"./Message/Message\";\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport { composeValidators, requiredField , maxLength} from '../../utils';\r\nimport { Textarea } from '../Common/FormsControls/FormsControls';\r\n\r\n\r\nconst AddMessageReduxForm = (props) => {\r\n   \r\n    return (\r\n        <Form\r\n            initialValues={{\r\n\r\n            }}\r\n            onSubmit={values => {\r\n                const text = values.newMessageText;\r\n                props.sendMessage(text)\r\n                \r\n                // send values to the cloud\r\n            }}\r\n            validate={values => {\r\n                // do validation here, and return errors object\r\n            }}\r\n            \r\n            >\r\n            {\r\n            ({ handleSubmit, pristine, form, submitting }) => (\r\n                <form onSubmit={handleSubmit}   className={classes.form}>\r\n                    <div>\r\n                        <Field\r\n                            name='newMessageText'\r\n                            component={Textarea}\r\n                            type='text'\r\n                            placeholder=\"Enter your message here\"\r\n                            afterSubmit={form.reset}\r\n                            validate={composeValidators(requiredField, maxLength(50))}>\r\n                            {/* {({ input, meta }) => (\r\n                                    <div className={classes.errorContainer}>\r\n                                        <textarea {...input} className={meta.error && meta.touched ? classes.required : undefined}/>\r\n                                        {meta.error && meta.touched && <span className={classes.requiredText}>{meta.error}</span>}\r\n                                    </div>\r\n                            )} */}\r\n                            </Field>\r\n                       \r\n                    </div>\r\n                    <div>\r\n                        <button type=\"submit\" disabled={submitting}>Send message</button>\r\n                    </div>\r\n                </form>\r\n            )}\r\n              \r\n            </Form>\r\n    )\r\n}\r\n\r\nconst Dialogs = (props) => {\r\n\r\n    const user = \"Taras\";\r\n\r\n    const {messages, dialogs} = props.dialogsPage;\r\n\r\n    const messagesElements = messages.map(msg => <Message user={user} key={msg.id} msg={{...msg, ava: dialogs[0].ava}}/>)\r\n    const dialogsElements = dialogs.map(dialog => <DialogItem name={dialog.name} key={dialog.id} id={dialog.id} ava={dialog.ava}/>)\r\n\r\n  \r\n\r\n    return (\r\n        <div className={classes.dialogs}>\r\n           \r\n            <div className={classes.dialogsItems}>\r\n\r\n                { dialogsElements }\r\n\r\n            </div>\r\n           \r\n            <div className={classes.messagesBox}>\r\n               <div className={classes.messages}>\r\n                { messagesElements }\r\n               </div>\r\n                \r\n\r\n                <AddMessageReduxForm sendMessage={props.sendMessage} />\r\n               \r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Dialogs;","import {connect} from \"react-redux\";\r\nimport {compose} from \"redux\"\r\nimport { withAuthRedirect } from \"../../HOC/WithAuthRedirect\";\r\n\r\n\r\nimport {sendMessage} from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\n/*import {StoreContext} from \"../../StoreContext\";*/\r\n\r\n\r\n/*const DialogsConteiner = (props) => {\r\n\r\n    return (\r\n        <StoreContext.Consumer>\r\n            {(store) => {\r\n                const state = store.getState().dialogsPage\r\n\r\n\r\n                const newMessage = () => {\r\n                    store.dispatch(addMessageActionCreator())\r\n\r\n                }\r\n\r\n                const onMessageTextChange = (text) => {\r\n                    store.dispatch(updateNewMessageTextActionCreator(text))\r\n                }\r\n                return (\r\n                    <Dialogs updateNewMessageText={onMessageTextChange}\r\n                             sendMessage={newMessage}\r\n                             dialogsPage={state}/>\r\n                )\r\n            }\r\n\r\n            }\r\n        </StoreContext.Consumer>\r\n    )\r\n}*/\r\n\r\n// compose (\r\n//     connect(mapStateToProps,\r\n//         {\r\n//         updateNewMessageText,\r\n//         sendMessage\r\n//     }),\r\n//     withAuthRedirect\r\n// )(Dialogs)\r\n\r\n\r\n// let AuthRedirectComponent = withAuthRedirect(Dialogs)\r\n\r\n\r\nconst mapStateToProps = (state) => ({ \r\n    dialogsPage : state.dialogsPage\r\n})\r\n\r\n\r\n/*const mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        updateNewMessageText: (text) => dispatch(updateNewMessageTextActionCreator(text)),\r\n        sendMessage: () => dispatch(addMessageActionCreator())\r\n    }\r\n}*/\r\n\r\n// const DialogsContainer = connect(mapStateToProps,\r\n//     {\r\n//     updateNewMessageText,\r\n//     sendMessage\r\n// })(AuthRedirectComponent)\r\n\r\nexport default compose (\r\n    connect(mapStateToProps, {sendMessage}),\r\n    withAuthRedirect\r\n)(Dialogs)"],"names":["withAuthRedirect","Component","AuthRedirectComponent","this","props","isAuth","to","React","connect","state","auth","msg","user","text","ava","author","className","classes","src","alt","id","isActive","undefined","name","AddMessageReduxForm","initialValues","onSubmit","values","newMessageText","sendMessage","validate","handleSubmit","form","pristine","submitting","component","Textarea","type","placeholder","afterSubmit","reset","composeValidators","requiredField","maxLength","disabled","dialogsPage","messages","dialogs","messagesElements","map","dialogsElements","dialog","compose","Dialogs"],"sourceRoot":""}